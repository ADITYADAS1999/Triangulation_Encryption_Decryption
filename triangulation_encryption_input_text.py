# -*- coding: utf-8 -*-
"""Triangulation_Encryption_input_text.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-w1VTt2HmgUSP9xVYOAcfQ2MoCbraUYA
"""

# This function is for 8 - bit binary stream from a external input.text file and generate the result in a output.text file

def triangular_encrypt(bit_stream):
    # Initialize the triangular structure
    triangle = [list(bit_stream)]
    triangle_output = [f"Level-{1} {' '.join(list(bit_stream))}"]  # Include the source bit stream in the output

    # Generate the triangle using XOR operation for each pair of consecutive bits
    for level_index in range(len(bit_stream) - 1):
        new_level = []
        for j in range(len(triangle[level_index]) - 1):
            # XOR operation between consecutive bits
            new_bit = str(int(triangle[level_index][j]) ^ int(triangle[level_index][j + 1]))
            new_level.append(new_bit)
        triangle.append(new_level)
        triangle_output.append(f"Level-{level_index+2} {' '.join(new_level)}")  # Include the level name

    # This step should be adapted based on the specific extraction logic defined in the document
    encrypted_stream = ''.join(row[0] for row in triangle)  # Adjusted to match the example output

    return encrypted_stream, triangle_output

# Function to read input from file, encrypt it, and write output to another file
def encrypt_file(input_file, output_file):
    try:
        # Read input from the input file
        with open(input_file, 'r') as f:
            bit_stream = f.read().strip()

        # Ensure the input is of correct length and format
        if len(bit_stream) == 8 and all(bit in ['0', '1'] for bit in bit_stream):
            encrypted_stream, triangle_output = triangular_encrypt(bit_stream)

            # Write the encrypted output to the output file
            with open(output_file, 'w') as f:
                f.write(f"Encrypted bit stream: {encrypted_stream}\n")
                f.write("Triangle Structure:\n")
                for level in triangle_output:
                    f.write(f"{level}\n")
            print("Encryption completed successfully.")
        else:
            print("Invalid input. Please ensure the input file contains an 8-bit binary number.")
    except FileNotFoundError:
        print("Input file not found.")

# Define input and output file paths
input_file = '/content/drive/MyDrive/input.txt'
output_file = '/content/drive/MyDrive/output.txt'

# Encrypt the input file and write the encrypted output to the output file
# This function is for 8 - bit binary stream from a external input.text file and generate the result in a output.text file
encrypt_file(input_file, output_file)

# This function is take a text or sentence from a external input.text file convert the text or sentence into binary then apply trigulation encryption and generate the result in a output.text file


def text_to_binary(text):
    # Convert text to binary
    binary_text = ''.join(format(ord(char), '08b') for char in text)
    return binary_text

def triangular_encrypt(bit_stream):
    # Initialize the triangular structure
    triangle = [list(bit_stream)]
    triangle_output = [f"Level-{1} {' '.join(list(bit_stream))}"]  # Include the source bit stream in the output

    # Generate the triangle using XOR operation for each pair of consecutive bits
    for level_index in range(len(bit_stream) - 1):
        new_level = []
        for j in range(len(triangle[level_index]) - 1):
            # XOR operation between consecutive bits
            new_bit = str(int(triangle[level_index][j]) ^ int(triangle[level_index][j + 1]))
            new_level.append(new_bit)
        triangle.append(new_level)
        triangle_output.append(f"Level-{level_index+2} {' '.join(new_level)}")  # Include the level name

    # This step should be adapted based on the specific extraction logic defined in the document
    encrypted_stream = ''.join(row[0] for row in triangle)  # Adjusted to match the example output

    return encrypted_stream, triangle_output

# Function to read input from file, convert to binary, encrypt it, and write output to another file
def encrypt_file(input_file, output_file):
    try:
        # Read input from the input file
        with open(input_file, 'r') as f:
            text = f.read().strip()

        # Convert text to binary
        binary_text = text_to_binary(text)

        # Ensure the input is of correct length and format
        if len(binary_text) == 8 * len(text):
            encrypted_stream, triangle_output = triangular_encrypt(binary_text)

            # Write the encrypted output to the output file
            with open(output_file, 'w') as f:
                f.write(f"Encrypted bit stream: {encrypted_stream}\n")
                f.write("Triangle Structure:\n")
                for level in triangle_output:
                    f.write(f"{level}\n")
            print("Encryption completed successfully.")
        else:
            print("Invalid input. Please ensure the input file contains a valid text sentence.")
    except FileNotFoundError:
        print("Input file not found.")

# Define input and output file paths
input_file = '/content/drive/MyDrive/input.txt'
output_file = '/content/drive/MyDrive/output.txt'

# Encrypt the input file and write the encrypted output to the output file
encrypt_file(input_file, output_file)

